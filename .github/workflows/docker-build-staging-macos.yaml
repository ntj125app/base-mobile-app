name: Build App Container Image for Staging (macOS)

on:
    workflow_dispatch:

jobs:
    build-ios-apps:
        name: Build iOS Apps
        runs-on: macos-latest
        env:
            ENV_BASE64: ${{ secrets.ENV_BASE64 }}
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Create .env file # Create .env file
              if: env.ENV_BASE64 != ''
              run: echo "$ENV_BASE64" | base64 -d > .env

            # Install apple certificates and provisioning profiles
            - name: Install Apple Certificates
              if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
              env:
                  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
                  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
                  BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
                  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
              run: |
                  CERTIFICATE_PATH=${{ github.workspace }}/build_certificate.p12
                  PP_PATH=${{ github.workspace }}/build_pp.mobileprovision
                  KEYCHAIN_PATH=${{ github.workspace }}/app-signing.keychain-db

                  echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
                  echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

                  security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                  security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                  security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                  security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                  security list-keychain -d user -s $KEYCHAIN_PATH

                  mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                  cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profile

            # Cypress prepare cache dir
            - name: Prepare Cypress cache dir
              run: |
                  sudo mkdir -p ${{ github.workspace }}/cache/Cypress
                  sudo chmod a+rw ${{ github.workspace }}/cache/Cypress
                  echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_ENV
                  echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_OUTPUT

            # NPM Cache
            - name: Set NodeJS Version # Set NodeJS Version
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
            - name: Get npm cache directory
              id: npm-cache-dir
              run: |
                  echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            - uses: actions/cache@v3
              id: npm-cache
              with:
                  path: |
                      ${{ steps.npm-cache-dir.outputs.dir }}
                      ${{ runner.temp }}/cache/Cypress
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            # NPM Global Install
            - name: Install NPM Packages
              run: npm install -g @ionic/cli native-run cordova-res @capacitor/core
            # NPM CI Install
            - name: NPM CI Install
              run: npm ci
            # NPM Vite Build
            - name: NPM Vite Build
              run: npx vite build
            # Capacitor Sync
            - name: Capacitor Copy
              run: npx cap copy ios

            # IOS Build
            - name: IPA Ionic Build
              run: npx cap sync ios
            # Generate exportOpntions.plist
            - name: Generate exportOptions.plist
              if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
              run: |
                  cd ios
                  echo '<?xml version="1.0" encoding="UTF-8"?>' > ../exportOptions.plist
                  echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ../exportOptions.plist
                  echo '<plist version="1.0">' >> ../exportOptions.plist
                  echo '<dict>' >> ../exportOptions.plist
                  echo '    <key>destination</key>' >> ../exportOptions.plist
                  echo '    <string>export</string>' >> ../exportOptions.plist
                  echo '    <key>method</key>' >> ../exportOptions.plist
                  echo '    <string>app-store</string>' >> ../exportOptions.plist
                  echo '    <key>signingStyle</key>' >> ../exportOptions.plist
                  echo '    <string>manual</string>' >> ../exportOptions.plist
                  echo '    <key>generateAppStoreInformation</key>' >> ../exportOptions.plist
                  echo '    <true/>' >> ../exportOptions.plist
                  echo '    <key>stripSwiftSymbols</key>' >> ../exportOptions.plist
                  echo '    <true/>' >> ../exportOptions.plist
                  echo '    <key>teamID</key>' >> ../exportOptions.plist
                  echo '    <string>'${{ secrets.TEAM_ID }}'</string>' >> ../exportOptions.plist
                  echo '    <key>uploadBitcode</key>' >> ../exportOptions.plist
                  echo '    <true/>' >> ../exportOptions.plist
                  echo '    <key>uploadSymbols</key>' >> ../exportOptions.plist
                  echo '    <true/>' >> ../exportOptions.plist
                  echo '    <key>compileBitcode</key>' >> ../exportOptions.plist
                  echo '    <key>provisioningProfiles</key>' >> ../exportOptions.plist
                  echo '    <dict>' >> ../exportOptions.plist
                  echo '        <key>'${{ secrets.BUNDLE_ID }}'</key>' >> ../exportOptions.plist
                  echo '        <string>'${{ secrets.PROVISIONING_PROFILE_NAME }}'</string>' >> ../exportOptions.plist
                  echo '    </dict>' >> ../exportOptions.plist
                  echo '</dict>' >> ../exportOptions.plist
                  echo '</plist>' >> ../exportOptions.plist
            # Generate XCode Archive
            - name: Generate IPA Archive
              if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
              run: |
                  cd ios
                  xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -archivePath App.xcarchive archive
                  xcodebuild -exportArchive -archivePath App.xcarchive -exportPath App.xcarchive -exportOptionsPlist ../exportOptions.plist
              env:
                  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
            # Generate IPA from XCode Archive
            - name: Generate IPA
              if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
              run: |
                  cd ios
                  xcrun xcodebuild -exportArchive -archivePath App.xcarchive -exportPath App.ipa -exportOptionsPlist ../exportOptions.plist
              env:
                  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
            # Upload iOS Build Artifacts
            - name: Upload a Build Artifact
              if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
              uses: actions/upload-artifact@v3.1.2
              with:
                  name: ipa-release
                  path: |
                      ${{ github.workspace }}/ios/App.ipa
                  retention-days: 1
