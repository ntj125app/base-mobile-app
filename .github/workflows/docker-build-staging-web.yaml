name: Build App Container Image for Staging (Web)

on:
    push:
        branches:
            - "main"
    workflow_dispatch:

jobs:
    build-web-app:
        name: Build Web Apps
        runs-on: ubuntu-latest
        env:
            ENV_BASE64: ${{ secrets.ENV_BASE64_DEV }}
            REGISTRY: ghcr.io # GitHub Container Registry
            IMAGE_NAME: ${{ github.repository }} # github.repository as <account>/<repo>
        permissions:
            contents: read
            packages: write

        outputs:
            npm-cache: ${{ steps.npm-cache-dir.outputs.dir }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Create .env file # Create .env file
              if: env.ENV_BASE64 != ''
              run: echo "$ENV_BASE64" | base64 -d > .env
            - name: Update .env file # Update .env file
              if: env.ENV_BASE64 != ''
              run: echo "VITE_APP_VERSION=${{ github.ref_name }}" >> .env

            # NPM Cache
            - name: Set NodeJS Version # Set NodeJS Version
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
            - name: Get npm cache directory
              id: npm-cache-dir
              run: |
                  echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            - uses: actions/cache@v3
              id: npm-cache
              with:
                  path: ${{ steps.npm-cache-dir.outputs.dir }}
                  key: ${{ runner.os }}-node-web-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-web-

            - name: NPM CI Install # Install NPM dependencies (node_modules folder is not cached)
              run: npm ci --force
            - name: NPM Build # Build NPM assets
              run: npx vite build

            - name: Setup QEMU # Setup QEMU
              uses: docker/setup-qemu-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
            - name: Setup Docker Buildx # Setup Docker Buildx
              uses: docker/setup-buildx-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''

            - name: Login to GitHub Container Registry # Login to GitHub Container Registry
              uses: docker/login-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Get & Set Container Metadata # Get & Set Container Metadata
              id: meta-packages
              uses: docker/metadata-action@v4
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            - name: Clean Build App # Remove unused files & dirs
              run: rm -rf node_modules public src tests android ios cypress .git .github .gitlab .gitattributes .gitignore .vscode .editorconfig .env .env.example .styleci.yml .eslintignore .eslintrc.js .stylelintrc.json package.json package-lock.json tsconfig.json tsconfig.node.json *.yaml *.md *.lock *.xml *.yml *.ts *.js *.html *.json
            - name: Build & Push Container # Build & Push Container
              uses: docker/build-push-action@v3
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta-packages.outputs.tags }}
                  labels: ${{ steps.meta-packages.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
