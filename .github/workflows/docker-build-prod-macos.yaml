name: Build App Container Image for Production (macOS)

on:
  workflow_dispatch:

jobs:
  build-ios-apps:
    name: Build iOS Apps
    runs-on: macos-latest
    env:
      ENV_BASE64: ${{ secrets.ENV_BASE64 }}
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create .env file
        if: env.ENV_BASE64 != ''
        run: echo "$ENV_BASE64" | base64 -d > .env
      - name: Update .env file
        if: env.ENV_BASE64 != ''
        run: echo "VITE_APP_VERSION=${{ github.ref_name }}" >> .env

      - name: Install Apple Certificates
        if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=${{ github.workspace }}/build_certificate.p12
          PP_PATH=${{ github.workspace }}/build_pp.mobileprovision
          KEYCHAIN_PATH=${{ github.workspace }}/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profile

      - name: Prepare Cypress cache dir
        run: |
          sudo mkdir -p ${{ github.workspace }}/cache/Cypress
          sudo chmod a+rw ${{ github.workspace }}/cache/Cypress
          echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_ENV
          echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: NPM Build
        run: pnpm dlx vite build

      - name: IPA Ionic Build
        run: npx cap sync ios

      - name: Generate exportOptions.plist
        if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
        run: |
          cd ios
          echo '<?xml version="1.0" encoding="UTF-8"?>' > ../exportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ../exportOptions.plist
          echo '<plist version="1.0">' >> ../exportOptions.plist
          echo '<dict>' >> ../exportOptions.plist
          echo '    <key>destination</key>' >> ../exportOptions.plist
          echo '    <string>export</string>' >> ../exportOptions.plist
          echo '    <key>method</key>' >> ../exportOptions.plist
          echo '    <string>app-store</string>' >> ../exportOptions.plist
          echo '    <key>signingStyle</key>' >> ../exportOptions.plist
          echo '    <string>manual</string>' >> ../exportOptions.plist
          echo '    <key>generateAppStoreInformation</key>' >> ../exportOptions.plist
          echo '    <true/>' >> ../exportOptions.plist
          echo '    <key>stripSwiftSymbols</key>' >> ../exportOptions.plist
          echo '    <true/>' >> ../exportOptions.plist
          echo '    <key>teamID</key>' >> ../exportOptions.plist
          echo '    <string>'${{ secrets.TEAM_ID }}'</string>' >> ../exportOptions.plist
          echo '    <key>uploadBitcode</key>' >> ../exportOptions.plist
          echo '    <true/>' >> ../exportOptions.plist
          echo '    <key>uploadSymbols</key>' >> ../exportOptions.plist
          echo '    <true/>' >> ../exportOptions.plist
          echo '    <key>compileBitcode</key>' >> ../exportOptions.plist
          echo '    <key>provisioningProfiles</key>' >> ../exportOptions.plist
          echo '    <dict>' >> ../exportOptions.plist
          echo '        <key>'${{ secrets.BUNDLE_ID }}'</key>' >> ../exportOptions.plist
          echo '        <string>'${{ secrets.PROVISIONING_PROFILE_NAME }}'</string>' >> ../exportOptions.plist
          echo '    </dict>' >> ../exportOptions.plist
          echo '</dict>' >> ../exportOptions.plist
          echo '</plist>' >> ../exportOptions.plist

      - name: Generate IPA Archive
        if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
        run: |
          cd ios
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -archivePath App.xcarchive archive
          xcodebuild -exportArchive -archivePath App.xcarchive -exportPath App.xcarchive -exportOptionsPlist ../exportOptions.plist
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Generate IPA
        if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
        run: |
          cd ios
          xcrun xcodebuild -exportArchive -archivePath App.xcarchive -exportPath App.ipa -exportOptionsPlist ../exportOptions.plist
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Zip iOS Build Artifacts
        if: env.BUILD_CERTIFICATE_BASE64 != '' && env.BUILD_PROVISION_PROFILE_BASE64 != ''
        run: |
          cd ios/
          zip -r ${{ github.workspace }}/ios-apps-${{ github.run_id }}.zip ./App.xcarchive ./App.ipa
          ls -lah ${{ github.workspace }}/ios-apps-${{ github.run_id }}.zip

      - name: Upload Artifacts TO Google Drive
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.2.2
        with:
          target: ios-apps-${{ github.run_id }}.zip
          credentials: ${{ secrets.GDRIVE_SA_KEY }}
          parent_folder_id: ${{ secrets.GDRIVE_FOLDER_ID }}
