name: Build App Container Image for Staging

on:
    push:
        branches:
            - "main"
    workflow_dispatch:

jobs:
    build-android-apps:
        name: Build Android Apps
        runs-on: ubuntu-latest
        env:
            ENV_BASE64: ${{ secrets.ENV_BASE64_DEV }}
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Create .env file # Create .env file
              if: env.ENV_BASE64 != ''
              run: echo "$ENV_BASE64" | base64 -d > .env
            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  distribution: "adopt"
                  java-version: "16"

            # Cypress prepare cache dir
            - name: Prepare Cypress cache dir
              run: |
                  sudo mkdir -p ${{ github.workspace }}/cache/Cypress
                  sudo chmod a+rw ${{ github.workspace }}/cache/Cypress
                  echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_ENV
                  echo "CYPRESS_CACHE_FOLDER=${{ github.workspace }}/cache/Cypress" >> $GITHUB_OUTPUT
            # Decode Keystore
            - name: Decode keystore
              env:
                  DEBUG_ENCODED_STRING: ${{ secrets.DEBUG_KEYSTORE }}
                  ENCODED_STRING: ${{ secrets.KEYSTORE }}
              run: |
                  echo $DEBUG_ENCODED_STRING | base64 -d > ${{ github.workspace }}/debug.keystore ;
                  sudo mkdir -p /home/runner/.android ; sudo chmod a+rw -R /home/runner/.android ;
                  sudo ln -sf ${{ github.workspace }}/debug.keystore /home/runner/.android/debug.keystore ;
                  echo $ENCODED_STRING | base64 -d > ${{ github.workspace }}/main.jks

            # NPM Cache
            - name: Set NodeJS Version # Set NodeJS Version
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
            - name: Get npm cache directory
              id: npm-cache-dir
              run: |
                  echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            - uses: actions/cache@v3
              id: npm-cache
              with:
                  path: |
                      ${{ steps.npm-cache-dir.outputs.dir }}
                      ${{ runner.temp }}/cache/Cypress
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            # NPM Global Install
            - name: Install NPM Packages
              run: npm install -g @ionic/cli native-run cordova-res @capacitor/core
            # NPM CI Install
            - name: NPM CI Install
              run: npm ci
            # NPM Vite Build
            - name: NPM Vite Build
              run: npx vite build

            # Android Build
            - name: APK Ionic Build
              run: npx cap sync android
            # Generate Android App Bundle
            - name: Generate APK Bundle
              run: |
                  cd android
                  chmod +x ./gradlew
                  ./gradlew bundleDebug
                  ./gradlew assembleDebug
                  ./gradlew signingReport
              env:
                  DEBUG_STORE_FILE: ${{ github.workspace }}/debug.keystore
                  DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_STORE_PASSWORD }}
                  DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
                  DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}
                  SIGNING_STORE_FILE: ${{ github.workspace }}/main.jks
                  SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
                  SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
                  SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

            # Upload Android Build Artifacts
            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v3.1.2
              with:
                  name: apk-dev-release
                  path: |
                      ${{ github.workspace }}/android/app/build/outputs/**/**/*.aab
                      ${{ github.workspace }}/android/app/build/outputs/**/**/*.apk
                  retention-days: 1

    build-web-app:
        name: Build Web Apps
        runs-on: ubuntu-latest
        env:
            ENV_BASE64: ${{ secrets.ENV_BASE64_DEV }}
            REGISTRY: ghcr.io # GitHub Container Registry
            IMAGE_NAME: ${{ github.repository }} # github.repository as <account>/<repo>
        permissions:
            contents: read
            packages: write

        outputs:
            npm-cache: ${{ steps.npm-cache-dir.outputs.dir }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Create .env file # Create .env file
              if: env.ENV_BASE64 != ''
              run: echo "$ENV_BASE64" | base64 -d > .env

            # NPM Cache
            - name: Set NodeJS Version # Set NodeJS Version
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
            - name: Get npm cache directory
              id: npm-cache-dir
              run: |
                  echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
            - uses: actions/cache@v3
              id: npm-cache
              with:
                  path: ${{ steps.npm-cache-dir.outputs.dir }}
                  key: ${{ runner.os }}-node-web-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-web-

            - name: NPM CI Install # Install NPM dependencies (node_modules folder is not cached)
              run: npm ci
            - name: NPM Build # Build NPM assets
              run: npx vite build

            - name: Setup QEMU # Setup QEMU
              uses: docker/setup-qemu-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
            - name: Setup Docker Buildx # Setup Docker Buildx
              uses: docker/setup-buildx-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''

            - name: Login to GitHub Container Registry # Login to GitHub Container Registry
              uses: docker/login-action@v2
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Get & Set Container Metadata # Get & Set Container Metadata
              id: meta-packages
              uses: docker/metadata-action@v4
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            - name: Clean Build App # Remove unused files & dirs
              run: rm -rf node_modules public src tests android ios .git .github .gitlab .gitattributes .gitignore .vscode .editorconfig .env .env.example .styleci.yml .eslintignore .eslintrc.js .stylelintrc.json package.json package-lock.json tsconfig.json tsconfig.node.json *.yaml *.md *.lock *.xml *.yml *.ts *.js *.html *.json
            - name: Build & Push Container # Build & Push Container
              uses: docker/build-push-action@v3
              if: env.REGISTRY != '' && env.IMAGE_NAME != ''
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta-packages.outputs.tags }}
                  labels: ${{ steps.meta-packages.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
